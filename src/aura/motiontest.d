module aura.motiontest;

import aura.camera;

import aura.selection;

import aura.model.vector;

import claro.core;
import claro.base.all;
import claro.graphics.all;

import opengl.gl;

import std.stdio;
import std.math;
import std.c.time;
import std.date;
import std.conv;
import std.random;
import std.boxer;
import std.gc;

import aura.window;

class AuraMotionTestWindow : AuraWindow {
	float[] v, vt, p;
	float[] vm = [1.726000E+000, 2.005000E+000, -9.453000E+001, -6.021800E+001, -2.153540E+002, -1.785080E+002, -2.242020E+002, -8.873300E+001, 9.966500E+001, 5.694300E+001, 2.175560E+002, 1.784770E+002, 2.242150E+002, -5.490000E-001, 8.493500E+001, 2.178100E+001, 8.999000E+000, -5.082000E+000, -5.949000E+001, 4.495900E+001, -1.862300E+001, -7.562000E+001, 8.944900E+001, -3.941000E+000, -5.837500E+001, 5.106100E+001, -7.152000E+000, -7.410700E+001, -1.241100E+001, 9.100500E+001, 1.528710E+003, 9.856830E+002, 8.915140E+002, 1.498340E+002, 8.775060E+002, 1.366224E+003, 1.094033E+003, 4.914940E+002, 8.922840E+002, 1.501520E+002, 8.691440E+002, 1.358911E+003, 1.088976E+003, 1.338648E+003, 4.869220E+002, 1.519170E+002, -7.834000E+000, -8.728000E+000, -1.048500E+001, 8.823000E+000, -6.398000E+000, -1.152900E+001, -2.958100E+001, 3.141000E+000, -1.047100E+001, 7.963000E+000, -1.749000E+000, -1.082200E+001, -2.633800E+001, -1.143400E+001, 2.714000E+000, -1.204000E+000, -1.204000E+000, -6.100000E-001, -2.243770E+002, 1.303640E+002, 1.531600E+001, 7.671600E+001, -1.351300E+002, -1.592000E+000, 2.230960E+002, -1.112210E+002, -1.718500E+001, -6.687300E+001, -8.930000E-001, 1.356720E+002, 1.250000E-001, 1.110000E-001, 2.010000E+000, 2.522000E+000, 2.443700E+001, 1.910000E+000, -7.495000E+000, -2.713200E+001, -1.817000E+000, -1.820000E+000, -1.991200E+001, -1.758000E+000, 7.271000E+000, 1.010000E-001, 2.694200E+001, 1, -18, -1.045200E+001, -1.386700E+001, 1.195700E+001, -1.680700E+001, -1.682200E+001, -1.585400E+001, 7.390000E+000, -1.381500E+001, 1.219900E+001, -1.437600E+001, -1.648900E+001, -1.565200E+001, -1.633600E+001, 8.316000E+000, -1.060000E-001, 2.540000E-001, 3.735000E+000, 1.065670E+002, 2.763000E+000, 2.078000E+000, 3.912000E+000, 6.409000E+000, -2.962000E+000, -1.050800E+002, -5.609000E+000, -2.554000E+000, -5.643000E+000, -2.010000E-001, -6.388000E+000, -1.490000E-001, -6.200000E-002, 3.053000E+000, -6.034100E+001, -2.756000E+000, -2.889000E+000, -2.703000E+000, -5.980000E-001, -3.218000E+000, 6.014600E+001, 2.519000E+000, 2.494000E+000, 2.987000E+000, -1.560000E-001, 2.090000E-001, 0, 4.600000E-002, 3.300000E-002, 5.500000E-002, -6.350000E-001, -3.920000E+000, 2.900000E-001, -3.754000E+000, -1.561000E+000, 4.000000E-003, 5.010000E-001, 2.669000E+000, 4.700000E-002, 3.451000E+000, 1.740000E-001, 1.499000E+000, -2.588000E+000, -8.995000E+000, -8.631000E+000, 2.420200E+001, 3.746000E+000, -4.648000E+000, -3.930000E-001, 1.582700E+001, -8.544000E+000, 2.293300E+001, 4.141000E+000, -4.423000E+000, -4.410000E-001, -4.807000E+000, 1.553600E+001, 1.037600E+001, 1.036300E+001, 1.035200E+001, -1.143000E+000, 1.084100E+001, 1.096300E+001, 1.017800E+001, 1.369300E+001, 1.032800E+001, -2.440000E-001, 1.235800E+001, 1.099600E+001, 1.042300E+001, 1.070500E+001, 1.358400E+001, 0, 7.700000E-002, -6.000000E-002, -1.110000E-001, -2.006000E+000, -4.330000E+000, -3.920000E-001, -1.071000E+000, -4.761000E+000, -1.820000E-001, 1.447000E+000, 3.448000E+000, 3.520000E-001, 2.680000E-001, -2.200000E-002, 4.766000E+000, 4.100000E+000, 1.130200E+001, 1.260100E+001, -4.072100E+001, -1.334000E+000, 5.840000E+000, 2.062000E+000, 2.454300E+001, 1.260600E+001, -3.879400E+001, -6.240000E-001, 5.376000E+000, 2.142000E+000, 5.993000E+000, 2.462200E+001, 5.895000E+000, 6.029000E+000, 5.942000E+000, 3.132300E+001, -6.916000E+000, 5.265000E+000, 1.709000E+000, -1.390000E+000, 5.809000E+000, 3.068500E+001, -4.154000E+000, 5.579000E+000, 2.859000E+000, 5.664000E+000, -1.871000E+000, 0];
	float[] vm1 = [-1.761000E+000, 3.101000E+000, 1.555400E+001, -1.089000E+001, 1.400000E-001, -1.187900E+001, -5.372800E+001, -7.792000E+000, -7.286000E+000, 1.226300E+001, 6.722000E+000, 6.259000E+000, 4.238100E+001, -1.987000E+000, 1.609600E+001, 9.313000E+000, -8.788000E+000, -2.395800E+001, -9.823000E+000, 4.593000E+000, 1.449300E+001, 1.456700E+001, -9.453000E+000, -2.588100E+001, -1.334700E+001, 9.539000E+000, 1.684500E+001, 1.757700E+001, 1.148500E+001, -5.951000E+000, -6.514000E+000, -1.553500E+001, -1.665300E+001, -5.670000E-001, 3.603000E+000, -1.043900E+001, 1.971700E+001, 6.560000E-001, -1.469400E+001, -1.573000E+000, 5.143000E+000, -6.725000E+000, 2.040600E+001, -2.512000E+000, -9.520000E-001, -1.661000E+000, -4.374000E+000, -2.028000E+000, 1.072000E+000, -3.339000E+000, 1.674000E+000, -3.027000E+000, 4.505000E+000, -2.760000E-001, 8.630000E-001, 3.869000E+000, 3.660000E-001, -2.633000E+000, 4.221000E+000, -2.766000E+000, 6.381000E+000, -2.748000E+000, -5.940000E-001, -4.220000E-001, -1.917000E+000, 4.106300E+001, -3.500000E-002, 2.335600E+001, 1.519400E+001, -1.044000E+000, -2.209000E+000, -1.143700E+001, -2.629000E+000, -3.133000E+000, -1.487000E+000, -1.796700E+001, 6.820000E-001, 4.210000E-001, -2.718000E+000, -4.250000E-001, 9.086000E+000, -2.025000E+000, -4.643000E+000, -2.916000E+000, 3.802000E+000, 3.510000E-001, -3.585000E+000, 2.615000E+000, 3.073000E+000, 3.540000E-001, 6.239000E+000, 0, -1.661800E+001, 2.045000E+000, 6.457000E+000, 2.824000E+000, 1.057000E+000, -1.216700E+001, -5.935000E+000, 1.042100E+001, 5.995000E+000, 2.144000E+000, 5.344000E+000, -1.198700E+001, -4.824000E+000, -1.133900E+001, 1.345600E+001, 9.030000E-001, -4.220000E-001, -1.871000E+000, 7.938000E+000, 1.455100E+001, 2.694000E+000, 8.102000E+000, -3.086000E+000, 8.180000E-001, -7.110000E+000, -1.064200E+001, 1.660000E-001, -6.192000E+000, 1.434000E+000, -7.183000E+000, 1.373000E+000, 1.059000E+000, -3.496000E+000, -1.165800E+001, -5.931000E+000, -5.401000E+000, -7.533000E+000, -4.079000E+000, 5.898000E+000, 7.236000E+000, 9.018000E+000, 7.181000E+000, 1.093200E+001, 8.910000E-001, 4.266000E+000, 0, -6.400000E-002, -4.230000E-001, -4.720000E-001, 3.990000E-001, 2.122000E+000, -3.010000E-001, 5.041000E+000, -5.940000E-001, -3.590000E-001, -2.530000E-001, 4.170000E-001, -2.800000E-001, -3.264000E+000, -2.960000E-001, 1.397000E+000, -5.532000E+000, 5.373000E+000, 5.473000E+000, -1.003800E+001, -4.924000E+000, -3.460000E+000, -1.754000E+000, -1.409000E+000, 5.409000E+000, -7.736000E+000, -4.998000E+000, -3.741000E+000, -2.489000E+000, -2.961000E+000, -2.191000E+000, 3.803000E+000, 4.191000E+000, 4.161000E+000, 3.679000E+000, 1.110000E+000, 3.214000E+000, 2.870000E+000, 4.345000E+000, 4.086000E+000, 1.896000E+000, 4.371000E+000, 3.318000E+000, 4.122000E+000, 3.227000E+000, 2.940000E+000, 0, -6.000000E-003, -5.400000E-002, 1.890000E-001, -2.140000E-001, -2.855000E+000, 3.000000E-002, -2.279000E+000, -3.651000E+000, 3.180000E-001, -1.483000E+000, 4.600000E-001, 3.000000E-002, -5.590000E-001, 5.800000E-002, 3.450000E+000, 8.100000E-001, -7.830000E-001, -3.450000E-001, 4.973000E+000, 1.023000E+000, 4.150000E-001, 3.673000E+000, 1.244300E+001, 9.900000E-002, 6.975000E+000, -3.641000E+000, 6.690000E-001, 9.870000E-001, 2.060000E-001, 7.330000E+000, -4.760000E-001, -7.630000E-001, -1.318000E+000, 6.140000E+000, -8.381000E+000, -5.830000E-001, -4.079000E+000, 5.511000E+000, -7.650000E-001, 2.881000E+000, -5.096000E+000, -4.440000E-001, -5.670000E-001, -3.070000E-001, 4.824000E+000, 0];
	float[] vm2 = [-3.557000E+000, 2.058000E+000, 2.420000E+000, -1.000800E+001, -7.623000E+000, -7.510000E+000, -2.411200E+001, -7.792000E+000, 2.740000E+000, 5.952000E+000, 1.081400E+001, 1.067400E+001, 1.771400E+001, 1.244000E+000, 5.862000E+000, -7.616000E+000, -1.018000E+000, 8.418000E+000, -1.165800E+001, -5.197000E+000, -2.763000E+000, -6.190000E-001, -9.047000E+000, 7.603000E+000, -8.826000E+000, 1.000700E+001, 1.939000E+000, 6.282000E+000, -3.122000E+000, 1.036800E+001, 1.781000E+000, -1.193400E+001, -1.172600E+001, -2.454000E+000, 5.448000E+000, -6.645000E+000, 6.250000E+000, 2.032000E+000, -1.178000E+001, -7.404000E+000, 4.480000E-001, -5.697000E+000, 2.954000E+000, 8.560000E-001, -2.735000E+000, 1.365400E+001, -6.567000E+000, -3.571000E+000, -4.603000E+000, -3.820000E-001, 1.474000E+000, -7.039000E+000, 2.560000E-001, 2.609000E+000, -4.767000E+000, -8.900000E-002, 4.732000E+000, -6.406000E+000, 9.680000E-001, -6.673000E+000, 3.225000E+000, -7.600000E-002, -6.070000E-001, 2.168000E+000, 3.865400E+001, -5.442000E+000, 3.680000E+000, 3.617000E+000, 1.253300E+001, -3.403000E+000, -3.867700E+001, 1.792700E+001, -4.637000E+000, 5.863000E+000, -4.250000E-001, -1.328500E+001, 3.900000E-002, -2.880000E-001, 5.370000E-001, -1.235000E+000, -4.787000E+000, -2.121000E+000, -2.216000E+000, 6.308000E+000, -1.002000E+000, 2.732000E+000, 5.603000E+000, 1.593000E+000, -1.087000E+000, -2.640000E-001, -1.210000E-001, 0, -4.396000E+000, -3.167000E+000, -2.400000E+000, -4.737000E+000, -4.983000E+000, -4.954000E+000, -5.458000E+000, 1.244000E+000, -2.600000E+000, -3.242000E+000, -3.807000E+000, -4.775000E+000, -5.236000E+000, -4.885000E+000, 5.260000E+000, 1.088000E+000, 1.410000E-001, 8.760000E-001, -1.827000E+001, 3.705000E+000, 1.955000E+000, 3.608000E+000, -6.450000E+000, -7.990000E-001, 1.508400E+001, -3.502000E+000, -5.820000E-001, -2.683000E+000, 7.070000E-001, -3.005000E+000, -3.000000E-003, 8.300000E-002, -1.390000E-001, 4.619000E+000, -3.390000E-001, -2.030000E-001, -1.210000E-001, -2.270000E+000, 4.760000E-001, -5.171000E+000, 4.910000E-001, 4.660000E-001, 1.279000E+000, 6.200000E-002, 3.400000E-001, 0, 3.500000E-002, 2.400000E-001, 2.900000E-001, 2.460000E+000, -1.018000E+000, 7.000000E-003, 2.970000E-001, -8.260000E-001, 2.010000E-001, -2.670000E+000, 2.690000E-001, -2.100000E-002, -1.144000E+000, 4.000000E-003, 1.632000E+000, 7.760000E-001, 2.459000E+000, 3.238000E+000, 1.500000E+000, 4.525000E+000, 1.249000E+000, 3.572000E+000, 4.333000E+000, 3.233000E+000, 1.634000E+000, 3.092000E+000, 1.095000E+000, 2.336000E+000, 1.372000E+000, 4.268000E+000, -5.578000E+000, -5.599000E+000, -5.686000E+000, 2.285000E+000, -6.114000E+000, -5.892000E+000, -6.169000E+000, -4.326000E+000, -5.740000E+000, 1.651000E+000, -4.788000E+000, -5.954000E+000, -5.803000E+000, -5.780000E+000, -4.806000E+000, 0, 5.180000E-001, -2.600000E-002, 1.500000E-001, 3.305000E+000, -2.629000E+000, 1.170000E-001, -3.694000E+000, -9.200000E-001, 1.800000E-001, -2.527000E+000, 2.535000E+000, 4.210000E-001, 3.360000E+000, 2.560000E-001, 2.341000E+000, 7.180000E-001, -9.670000E-001, -8.940000E-001, -7.330000E-001, -2.410000E-001, 7.760000E-001, 8.650000E-001, -5.980000E+000, -9.040000E-001, -3.065000E+000, 2.567000E+000, 4.430000E-001, 1.788000E+000, 4.050000E-001, -1.125700E+001, -2.877000E+000, -2.897000E+000, -3.019000E+000, -2.356000E+000, -1.131000E+000, -2.707000E+000, -2.212000E+000, -3.531000E+000, -2.662000E+000, -2.191000E+000, 7.540000E-001, -2.783000E+000, -1.390000E+000, -2.829000E+000, -4.388000E+000, 0];
	float[] vm3 = [-8.219000E+000, -1.906000E+000, -7.623000E+000, 4.080000E-001, -1.908100E+001, 8.870000E+000, 1.080000E-001, -4.284000E+000, 2.965000E+000, 1.105900E+001, 1.614000E+001, -8.834000E+000, 1.546400E+001, -2.620000E-001, 8.591000E+000, -9.201000E+000, -1.347200E+001, -1.729000E+001, 9.633000E+000, 1.238000E+000, 9.669000E+000, 8.260000E+000, 2.259600E+001, -2.111800E+001, 1.176600E+001, 4.971000E+000, 5.895000E+000, -6.484000E+000, 9.623000E+000, -2.232500E+001, 1.180000E+001, -1.734600E+001, -1.695200E+001, 8.816000E+000, 8.040000E+000, 2.651000E+000, 4.087000E+000, -2.293500E+001, -1.356400E+001, 4.358000E+000, 7.398000E+000, 3.804000E+000, 5.470000E+000, -7.469000E+000, -7.214000E+000, -2.939400E+001, 8.923000E+000, -1.849000E+000, -4.309000E+000, -2.973000E+000, -1.598200E+001, 7.090000E+000, -7.383000E+000, -4.195000E+000, -4.546000E+000, -2.323000E+000, -1.012400E+001, 5.763000E+000, 5.803000E+000, 5.974000E+000, -5.615000E+000, -1.781000E+000, -1.338000E+000, -5.520000E+000, -9.492200E+001, 1.745000E+000, -6.901000E+000, -1.335600E+001, -5.088700E+001, 2.196000E+000, 9.540300E+001, 5.887500E+001, 5.099000E+000, 3.613000E+001, -9.850000E-001, 3.484200E+001, 5.210000E-001, 5.200000E-001, 3.960000E+000, 7.504000E+000, 1.088500E+001, 4.785000E+000, 8.205000E+000, -1.656100E+001, -3.277000E+000, -1.107600E+001, 1.402000E+000, -4.160000E+000, -1.074400E+001, 5.320000E-001, 2.105000E+000, 0, -1.220000E-001, -2, -4.699000E+000, -1.435000E+000, -5.409000E+000, -1.381000E+000, -2.620000E+000, -6.360000E-001, -4.523000E+000, -2.745000E+000, -1.900000E+000, -1.964000E+000, -4.528000E+000, -1.761000E+000, -5.267000E+000, -2.060000E-001, 2.383000E+000, 4.330000E+000, 3.213500E+001, -1.555700E+001, 1.202000E+000, -8.912000E+000, 3.116500E+001, -6.520000E-001, -3.365900E+001, 4.719000E+000, -1.260000E-001, 3.644000E+000, 7.440000E-001, -1.736400E+001, -1.496000E+000, -1.591000E+000, 6.850000E-001, -6.186000E+000, -2.100000E-002, 6.690000E-001, 3.462000E+000, 9.436000E+000, -4.017000E+000, -2.361000E+000, -4.384000E+000, -3.470000E+000, -6.332000E+000, -1.449000E+000, -9.257000E+000, 0, 6.490000E-001, 2.310000E-001, 2.470000E-001, 2.660000E+000, 4.590000E+000, 8.840000E-001, 2.743000E+000, 2.244000E+000, 2.400000E-001, -3.296000E+000, -3.773000E+000, 7.900000E-001, 5.300000E-002, 8.200000E-001, -1.213000E+000, -2.176000E+000, -4.631000E+000, -5.130000E+000, 3.443000E+000, -7.171000E+000, -3.780000E+000, -8.636000E+000, -1.764300E+001, -5.361000E+000, 4.425000E+000, -1.559000E+000, -3.585000E+000, -4.384000E+000, -3.887000E+000, -1.468500E+001, 1.362800E+001, 1.367800E+001, 1.379000E+001, -1.093000E+001, 1.403700E+001, 1.368300E+001, 1.353300E+001, 7.234000E+000, 1.394900E+001, -1.230700E+001, 1.543100E+001, 1.394600E+001, 1.319900E+001, 1.354900E+001, 6.375000E+000, 0, 3.960000E-001, 5.790000E-001, 1.300000E-001, -7.310000E-001, -6.500000E-002, 4.280000E-001, 2.272000E+000, -1.870000E-001, 1.490000E-001, 1.066000E+000, -4.061000E+000, -9.500000E-002, -3.388000E+000, 2.040000E-001, -1.565000E+000, 2.444000E+000, -4.860000E-001, -1.330000E-001, -2.218000E+000, 2.183000E+000, 2.915000E+000, 2.997000E+000, 2.169000E+000, -2.730000E-001, 2.272000E+000, -8.310000E-001, 1.643000E+000, 2.072000E+000, 2.533000E+000, 1.425300E+001, 8.068000E+000, 7.919000E+000, 8.262000E+000, 2.336000E+000, 7.908000E+000, 8.625000E+000, 9.178000E+000, 5.370000E-001, 7.357000E+000, -2.985000E+000, 1.644200E+001, 8.388000E+000, 1.208400E+001, 8.269000E+000, 4.261000E+000, 0];
	float[] vm4 = [-2.287000E+000, 2.908000E+000, -1.665100E+001, 5.744000E+000, 1.455400E+001, -3.385100E+001, -2.061800E+001, 9.088000E+000, 2.519000E+001, -1.942000E+001, 9.773000E+000, 2.728400E+001, -6.213000E+000, -2.409000E+000, -2.146000E+000, 4.020000E+000, -1.084000E+000, 3.827000E+000, 2.928800E+001, 2.911500E+001, -1.623100E+001, -1.051500E+001, 1.266200E+001, 2.580000E-001, 3.107800E+001, -7.317000E+000, -9.473000E+000, -4.060900E+001, -1.223000E+001, -6.967000E+000, 1.295500E+001, 3.959600E+001, 3.817500E+001, 8.914000E+000, -3.121800E+001, -2.803800E+001, -3.962300E+001, 1.406000E+001, 4.008700E+001, 7.670000E-001, -1.467800E+001, -1.704600E+001, -6.624000E+000, 6.314000E+000, -6.487000E+000, 3.743500E+001, 4.840000E+000, -1.573000E+000, -2.283000E+000, 4.341000E+000, 1.343300E+001, -3.273000E+000, 1.866000E+000, 6.390000E-001, -2.534000E+000, 7.995000E+000, -3.446000E+000, -2.084000E+000, -1.315300E+001, -2.749000E+000, 2.835000E+000, -2.930000E+000, -3.446000E+000, -4.662000E+000, -2.919200E+001, -1.071900E+001, 4.237000E+000, 7.290000E+000, -2.009100E+001, -2.371000E+000, 20, 8.858000E+000, -9.948000E+000, 3.162000E+000, -2.977000E+000, 2.210500E+001, -8.430000E-001, -8.150000E-001, 6.020000E-001, -1.029000E+001, 8.431000E+000, 3.280000E-001, 4.564000E+000, -7.348000E+000, -2.205000E+000, 8.903000E+000, -5.180000E+000, -4.243000E+000, -4.616000E+000, -7.970000E-001, -3.384000E+000, 0, 3.143000E+000, 2.198000E+000, 1.778000E+000, 6.803000E+000, 1.117000E+000, 4.080000E+000, -5.675000E+000, 5.129000E+000, 1.673000E+000, 7.182000E+000, 6.798000E+000, 4.107000E+000, 3.658000E+000, 3.637000E+000, 2.433000E+000, -2.698000E+000, -4.001000E+000, -3.555000E+000, 1.797600E+001, 6.651400E+001, -2.690000E-001, 3.318400E+001, 4.939000E+000, -4.625000E+000, -2.599100E+001, -2.351800E+001, -4.901000E+000, -1.134600E+001, -2.794000E+000, -1.107600E+001, 1.433000E+000, 1.510000E+000, 2.955000E+000, 1.983000E+000, 1.431000E+001, 1.577000E+000, -5.809000E+000, 5.433000E+000, 2.400000E-002, -2.330000E-001, -5.113000E+000, 1.855000E+000, 3.111000E+000, 1.495000E+000, -1.437000E+000, 0, -1.292000E+000, -1.089000E+000, -1.282000E+000, -9.540000E-001, 1.200000E-001, -4.450000E-001, -6.580000E-001, 5.700000E-002, -1.321000E+000, 3.068000E+000, 2.974000E+000, -8.810000E-001, 3.162000E+000, -7.500000E-001, 1.399000E+000, -2.486000E+000, -3.410000E-001, 1.460000E+000, 1.607200E+001, 4.979000E+000, -3.699000E+000, 1.362000E+000, 1.289500E+001, 7.740000E-001, 4.540000E-001, 6.029000E+000, -3.401000E+000, -1.118000E+000, -3.024000E+000, 5.399000E+000, 8.370000E-001, 1.328000E+000, 1.213000E+000, -1.793000E+000, 1.703900E+001, 1.779000E+000, 6.626000E+000, 9.160000E-001, 1.067000E+000, 3.723000E+000, 8.428000E+000, 1.527000E+000, 9.360000E-001, 1.160000E+000, -3.590000E-001, 0, 9.810000E-001, 3.850000E-001, 3.520000E-001, -4.928000E+000, -6.175000E+000, 7.860000E-001, -2.188000E+000, -3.641000E+000, 4.420000E-001, 2.902000E+000, 3.946000E+000, 1.048000E+000, 2.034000E+000, 9.220000E-001, 2.114000E+000, 5.139000E+000, 6.255000E+000, 5.356000E+000, -1.157500E+001, -4.892000E+000, 6.041000E+000, 6.540000E-001, -3.698000E+000, 6.280000E+000, -2.090200E+001, 2.919000E+000, 7.282000E+000, 7.308000E+000, 6.329000E+000, -6.835000E+000, 5.397000E+000, 5.082000E+000, 5.311000E+000, 3.978000E+000, 3.084000E+000, 4.996000E+000, 7.487000E+000, 2.356000E+000, 5.127000E+000, 3.372000E+000, 9.868000E+000, 5.948000E+000, 9.372000E+000, 4.924000E+000, -7.400000E-001, 0];
	
	// the value for the 4 controls
	float r1, r2, r3, r4;
	
	// these are set when the value has changed
	bool control1, control2, control3, control4;
	
	Vector[16] pts;
	
	this( ) {
		super( "Motion Text", "[_scene]" );
		
		prepare( );
	}
	
	void gl_redraw( OpenGLWidget w ) {
		render( w, aSelectNone );
	}
	
	void render( OpenGLWidget w, int selectMode ) {
		this.ogl.activate( );
		
		if ( cam is null )
		{
			cam = new Camera;
		}
		
		prepareGl( );
		
		glClearColor( 0.8, 0.8, 0.8, 1 );
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		
		cam.setupPosition( );

		// render here
		update( ); // FIXME: pass ms delay time
		
		void drawLine( int a, int b )
		{
			glBegin( GL_LINES );
			pts[a].glv;
			pts[b].glv;
			glEnd( );
		}
		
		glColor4f( 0.0f, 0.0f, 0.5f, 1.0f );
		glLineWidth( 10 );
		drawLine( 0, 13 );
		drawLine( 13, 11 );
		drawLine( 13, 5 );
		drawLine( 11, 12 );
		drawLine( 12, 10 );
		drawLine( 5, 6 );
		drawLine( 6, 4 );
		drawLine( 13, 1 );
		drawLine( 1, 2 );
		drawLine( 2, 7 );
		drawLine( 7, 3 );
		drawLine( 1, 8 );
		drawLine( 8, 14 );
		drawLine( 14, 9 );

		glDisable( GL_LIGHTING );
		
		glLineWidth( 1 );
		drawGrid( );
		drawDir( );
		
		this.ogl.flip( );
	}
	
	void prepare( )
	{
		r1 = r2 = r3 = r4 = 0;
		v.length = vt.length = 230;
		p.length = 230;
	}
	
	void update( float elapsed=10 )
	{
		int i;
		static float t = 0;
		
		// I think this combines the different "types"
		for (i = 0; i < 230; i++)
		{
			v[i] = vm[i] + r1 * vm1[i] + r2 * vm2[i] + r3 * vm3[i] + r4 * vm4[i];
			vt[i] = vm[i];
		}
		
		// and this updates it to the current time
		for (i = 0; i < 45; i++)
		{
			p[i] = v[i] + v[i + 46] * sin(t) + v[i + 92] * cos(t) + v[i + 138] * sin(2 * t) + v[i + 184] * cos(2 * t);
		}
		
		// final point update
		for (i = 0; i < 15; i++)
		{
			//pts[i].x = -(p[i] * c - p[i + 15] * s) + 500;
			pts[i].x = p[i] + 500;
			pts[i].y = p[i + 30] - 500;
			pts[i].z = p[i + 15] + 500;
		
			pts[i] *= 0.005;
		}
		
		float perOld = v[45];
		
		float r1n, r2n, r3n, r4n;
		
		r1n = r2n = r3n = r4n = 0.0f;
		
		if (control1)
		{
		    for (i = 0; i < 230; i++)
		    {
		        v[i] = vt[i] + (r1 - r1n) * vm1[i];
		    } // end of for
		    control1 = false;
		} // end if
		if (control2)
		{
		    for (i = 0; i < 230; i++)
		    {
		        v[i] = vt[i] + (r2 - r2n) * vm2[i];
		    } // end of for
		    control2 = false;
		} // end if
		if (control3)
		{
		    for (i = 0; i < 230; i++)
		    {
		        v[i] = vt[i] + (r3 - r3n) * vm3[i];
		    } // end of for
		    control3 = false;
		} // end if
		if (control4)
		{
		    for (i = 0; i < 230; i++)
		    {
		        v[i] = vt[i] + (r4 - r4n) * vm4[i];
		    } // end of for
		    control4 = false;
		} // end if
		
		t = (t * perOld / v[45] + elapsed * 7.540000E-001 / v[45]) % 1.256637E+001;
	}
}

